#Quad FE Chip Tester

#Critical settings
[DEFAULT]
NAME = quadFE
NASICS = 4
NASICCH = 16
#Because different firmwares do different things with 0 indexing
NASIC_MIN = 0
NASIC_MAX = 3
NASICCH_MIN = 0
NASICCH_MAX = 15
LATEST_FW = 0x204
#ADC information.  If we ever make a board with a different ADC that has a different number of bits or reference voltage, we can just change it here
ADC = LTC2314
ADC_FULL_SCALE = 0x3FFF
ADC_REF_VOLTAGE = 2.048
#in microseconds.  This affects plots only
SAMPLE_PERIOD = 0.25
#Settings for the discrete DAC that sits on the PCB, if there is one
EXTERNAL_DAC_VAL_MAX = 0xFFFF
#Size of the shunt resistor used for on board current monitoring
PCB_SHUNT_RESISTOR = 0.1
#Pause between Power Supply beeps when the test is done in seconds
BEEP_PAUSE = 3

#Inform the femb_udp module that does low level communications
[UDP_SETTINGS]
#UDP Packet header size in bytes
HEADER_SIZE = 16
#Info for where the packet number information is in the header
PACKET_NUM1 = >1I
PACKET_NUM2 = 0f
#IP Address of the FPGA
UDP_IP = 192.168.121.1
#Bytes for constructing the UDP packet that the FPGA expects
KEY1 = 0xDEAD
KEY2 = 0xBEEF
FOOTER = 0xFFFF
#When you want to write a register you write to port WREG.  Requesting to read a register gets sent to RREG
#The response comes on port RREGRESP.  The actual data comes out on HSDATA
UDP_PORT_WREG = 32000
UDP_PORT_RREG = 32001
UDP_PORT_RREGRESP = 32002
UDP_PORT_HSDATA = 32003
#Max values to check that you're not doing anything weird with trying to write packets
MAX_REG_NUM = 0xFFFF
MAX_REG_VAL = 0xFFFFFFFF
MAX_NUM_PACKETS = 100000
MAX_PACKET_SIZE = 1024
UDP_SLEEP = 0.001
MAX_ATTEMPTS = 5

[POWER_SUPPLIES]
OPTION1 = RIGOL DP832

[POWER_SUPPLY]
PS_HEATING_CHN = 1
PS_QUAD_CHN = 2
PS_FPGA_CHN = 3
#Voltage to set them at
PS_HEATING_V = 12
PS_QUAD_V = 5
PS_FPGA_V = 5
#If overvoltage protection is on, these are the limits that would trip it off
PS_HEATING_V_LIMIT = 13.1
PS_QUAD_V_LIMIT = 5.1
PS_FPGA_V_LIMIT = 5.1
#If overcurrent protection is on, these are the limits that would trip it off
PS_HEATING_I_LIMIT = 3.2
PS_QUAD_I_LIMIT = 2.0
PS_FPGA_I_LIMIT = 2.0
#Is overvoltage protection on?
PS_HEATING_V_PROTECTION = OFF
PS_QUAD_V_PROTECTION = OFF
PS_FPGA_V_PROTECTION = OFF
#Is overcurrent protection on?
PS_HEATING_I_PROTECTION = ON
PS_QUAD_I_PROTECTION = ON
PS_FPGA_I_PROTECTION = ON
#Connecting common functions to this firmware's register map
[REGISTERS]
#Global Reset
REG_RESET = 0
#Register for SPI functions
REG_FEASIC_SPI = 5
#First register that holds ASIC settings to write during SPI
REG_FESPI_BASE = 20
#ASIC Readback registers (done internally now)
REG_FESPI_RDBACK_BASE = None
#Register that determines parameters of the pulse that goes to CK pin of ASIC (internal pulse)
REG_INT_PULSE = 17
#Register that determines parameters of pulse that switches on-board MUX (external pulse)
REG_EXT_PULSE = 7
#Register to control LEDs
REG_LED = 16
#Register to turn on and off each ASIC's power supply regulator
REG_ON_OFF = 12
#Register to choose which chip and channel to read out of the UDP interface
REG_CH_SEL = 4
#Register for the sampling scope option
REG_SS = 10
#Register for the mux configurations
REG_MUX_MODE = 9
#Register for the pulse tagging options
REG_TAGGING = 74
#Register for the timeout setting
REG_TIMEOUT = 76
#Register for the sample speed setting
REG_SAMPLESPEED = 75        
#Register for the frame size before it sends out the UDP packet
REG_FRAME_SIZE = 40        
#Register for the firmware version setting
REG_FW_VER = 100
#Register to readout a chip's regular channel outputs, or the monitor test pin output
REG_READOUT_OPTIONS = 60
#Register to write the 16 bit value you want the external DAC to be
REG_EXT_DAC_VAL = 1
#Register to write the START/STOP sequence to in order to write in this value
REG_EXT_DAC_SET = 2
#Register that actually enables the DAC output
REG_EXT_DAC_PWR = 61
#Lowest and highest registers for the sync parameter
REG_LATCH_MIN = 65
REG_LATCH_MAX = 68
REG_PHASE_MIN = 69
REG_PHASE_MAX = 72
#Register for doing the sync of the monitor pin ADCs
REG_TEST_ADC = 73
#Register that initializes an I2C read or write
REG_I2C_ACTION = 56
#Register that defines the address of the device and register within the device that you're talkinga bout
REG_I2C_CONFIG = 57
#Value you want to write into I2C device
REG_I2C_VALUE = 58
#Value you read back from the I2C device
REG_I2C_RESULT = 59
#Register values of the devices for each power rail
REG_INA226_VDDA_0 = 0x40
REG_INA226_VDDP_0 = 0x41
REG_INA226_VDDA_1 = 0x42
REG_INA226_VDDP_1 = 0x43
REG_INA226_VDDA_2 = 0x44
REG_INA226_VDDP_2 = 0x45
REG_INA226_VDDA_3 = 0x46
REG_INA226_VDDP_3 = 0x47

[DEFINITIONS]
#The value to write to the reset register to reset
RESET = 1
#Will send a reset pattern to the ASICs to clear their settings
FEASIC_SPI_RESET = 2
#Will start the SPI communication to write all ASIC settings.  Will happen continuously as long as this is 1
FEASIC_SPI_START = 1
#When 0, after completing a full write cycle, FPGA wil stop writing to ASICs
FEASIC_SPI_STOP = 0
#Normal readout, every 2 bytes will have 2 bits of 0s, and 14 bits of data
TAGGING_OFF = 0
#Pulse tagging readout, the first two bits will have a pattern displaying if it's a positive or negative pulse
TAGGING_ON = 1
#Readout ASIC outputs normally
READOUT_NORMAL = 0
#Readout monitor pin ADC
READOUT_TEST_ADC = 1
#Internal ASIC DAC settings, bit 6 needs to be 1 to enable, 0 means it wont pulse
INTERNAL_PULSE_ON = 0b01000000
INTERNAL_PULSE_OFF = 0
#The way the DAC/FPGA communication works is that you need a falling edge from 1 to 0 to write in the value you want to the DAC
PCB_DAC_STOP = 0
PCB_DAC_START = 1
#Settings to turn the ASICs on or off, later add ability to do each individually
ASIC_ON = 0
ASIC_OFF = 0xF
#Settings to turn the ASICs on or off, later add ability to do each individually
EXT_DAC_ON = 0
EXT_DAC_OFF = 0xF
#MUX Options
#DAC output at DC on test pin input, other pulse MUX at ground
MUX_DAC_GND = 0
#External LEMO on test pin input, other pulse MUX at ground
MUX_EXT_GND = 1
#DC Ground at both MUX outputs
MUX_GND_GND = 2
#Test pin goes to ADC, other pulse MUX at ground
MUX_ADC_GND = 3
#Test pin goes to external DAC, automatically switches from DAC to VDD according to REG_EXT_PULSE timing, other pulse MUX at ground
MUX_DACPULSE_GND = 4
#Test pin at GND, pulse input at DC VDDP
MUX_GND_VDD = 5
#Test pin at GND, pulse input at DC DAC output
MUX_GND_DAC = 6
#Test pin at GND, pulse input gets external LEMO
MUX_GND_EXT = 7
#Test pin at GND, pulse input automatically switches external DAC to VDD according to REG_EXT_PULSE timing
MUX_GND_DACPULSE = 8
#DC Ground at both MUX outputs, but internal CK pulse switches according to REG_EXT_PULSE timing
MUX_GND_GND_INTPULSE = 9
#Test pin goes to ADC, pulse input automatically switches external DAC to VDD according to REG_EXT_PULSE timing
MUX_ADC_DACPULSE = 10
#Default ADC sampling speed.  ADC sampler runs on 160 MHz clock.  2 clock steps are inherent to the state machine and are uncounted
#You tell the FPGA how many extra 160 MHz steps to wait until the next sample.  38 + 2 = 40.  Default is 4 MHz sample rate
#When sampling the output of an unbuffered FE chip or the DAC, the driving capability is not so high.  Given the current that the ADC draws
#Those outputs need time to recover back to their baseline values.  So we lower the sample speed.  This slows down how fast data comes out.
UNBUFFERED_SAMPLE_SPEED = 368

[INITIAL_SETTINGS]
#Sampling scope off
DEFAULT_SS = 0
#Ground everywhere through MUX
DEFAULT_MUX = 2
#Period in sampling counts (generally 2 MHz, every 500 ns)
DEFAULT_INTERNAL_PULSE_FREQ = 500
#Addition to the period in 80 MHz counts (12.5 ns counts)
DEFAULT_INTERNAL_PULSE_DLY = 80
#Amplitude of external DAC that will pulse
DEFAULT_EXTERNAL_DAC_VAL = 0x380
#The period in 4 MHz sampling counts (every 250 ns)
DEFAULT_EXTERNAL_DAC_TP_PERIOD = 800
#Addition to the period in 50 MHz counts (every 20 ns)
DEFAULT_EXTERNAL_DAC_TP_SHIFT = 0
#Size of UDP packet coming out
DEFAULT_FRAME_SIZE = 0x01f8
#Length of time to wait for UDP packet to fill up with data before just sending it
DEFAULT_TIMEOUT = 0x00005000
#Default ADC sampling speed.  ADC sampler runs on 160 MHz clock.  2 clock steps are inherent to the state machine and are uncounted
#You tell the FPGA how many extra 160 MHz steps to wait until the next sample.  38 + 2 = 40.  Default is 4 MHz sample rate
DEFAULT_SAMPLE_SPEED = 38
#Initial settings for the monitor pin ADCs
DEFAULT_MONITOR_ADC_SETTINGS = 0x000000C8
#Settings for the on board INA chips for power monitoring (mostly affects averaging time)
DEFAULT_INA_LOW_BYTE = 0x27
DEFAULT_INA_HIGH_BYTE = 0x07

#GUI Settings.  The actual "OPTION1" variable doesn't matter, the GUI will just look at the actual values
[GUI_SETTINGS]
#Min and max values to allow on the GUI entry
CHIP_MIN = 0
CHIP_MAX = 8000

#Min and max values to allow on the GUI entry
SOCKET_MIN = 0
SOCKET_MAX = 200
[KNOWN_TEST_STANDS]
OPTION1 = 1
OPTION2 = 2
OPTION3 = 3
OPTION4 = Other

[KNOWN_QUAD_BOARDS]
OPTION1 = 2v0
OPTION2 = 3v0
OPTION3 = Other

[KNOWN_FPGA_MEZZANINES]
OPTION1 = FM17
OPTION2 = FM43
OPTION3 = 16
OPTION4 = Other

[KNOWN_CHIP_VERSIONS]
OPTION1 = 7
OPTION2 = 8
OPTION3 = Other

#SPI Configuration settings
[BASELINE_ARRAY]
OPTION1 = 200mV
OPTION2 = 900mV

[BUFFER_ARRAY]
OPTION1 = b_on
OPTION2 = b_off

[GAIN_ARRAY]
OPTION1 = 4.7mV
OPTION2 = 7.8mV
OPTION3 = 14mV
OPTION4 = 25mV

[SHAPING_ARRAY]
OPTION1 = 0.5us
OPTION2 = 1us
OPTION3 = 2us
OPTION4 = 3us

[LATCH_SETTINGS_DEFAULT]
OPTION1 = 0x00000000
OPTION2 = 0x00000000
OPTION3 = 0x00000000
OPTION4 = 0x00000000

[PHASE_SETTINGS_DEFAULT]
OPTION1 = 0x00000000
OPTION2 = 0x00000000
OPTION3 = 0x00000000
OPTION4 = 0x00000000

[2v0_LATCH_SETTINGS]
OPTION1 = 0x00000000
OPTION2 = 0x00000000
OPTION3 = 0x00000000
OPTION4 = 0x00000000

[2v0_PHASE_SETTINGS]
OPTION1 = 0x55555555
OPTION2 = 0x51401550
OPTION3 = 0x55555555
OPTION4 = 0x01555004

[3v0_LATCH_SETTINGS]
OPTION1 = 0x00000000
OPTION2 = 0x00000000
OPTION3 = 0x00000000
OPTION4 = 0x00000000

[3v0_PHASE_SETTINGS]
OPTION1 = 0x01000005
OPTION2 = 0x00000000
OPTION3 = 0x55555555
OPTION4 = 0x00000000

[SYNC_SETTINGS]
#Packets to collect for each channel
SYNC_PACKETS = 5
#Internal ASIC pulse settings for syncing
SYNC_INTERNAL_PULSE_FREQ = 800
SYNC_INTERNAL_PULSE_DLY = 0
#ASIC Settings for the sync test
SYNC_BASELINE = 200mV
SYNC_GAIN = 14mV
SYNC_PEAK = 2us
SYNC_LEAK = 500pA
SYNC_BUFFER = on
SYNC_ACDC = dc
SYNC_DAC_PEAK_HEIGHT = 11
#When measuring the output peaks for syncing, we want a certain amount of peaks with an amplitude in a certain window
SYNC_PEAK_MIN = 4000
SYNC_PEAK_MAX = 7500
SYNC_PEAK_NUM_MAX = 5
SYNC_PEAK_NUM_MIN = 5
#We also check the baseline in between pulses to make sure it's within a window
SYNC_BASELINE_MIN = 1000
SYNC_BASELINE_MAX = 3500
#We also test for little spikes and glitches indicative of a sync offset not serious enough to change the pulse
SYNC_BASELINE_R = 15
SYNC_HIGH_FREQ_NOISE_MAX = 100000
#When detecting pulses, how much spacing to put between the pulses that you plot.  If there's another peak within this close, it'll look for another peak
SYNC_PULSE_SPACING = 200
#When detecting pulses, how much far you want to go outside the peak to decide that you're essentially at the baseline
SYNC_PULSE_WIDTH = 15

[ALIVE_SETTINGS]
#Packets to collect for each channel
ALIVE_PACKETS = 5
#DAC amplitude to pulse across external capacitor to actual input pins to ASIC.  This capacitor is 1 nF, so the voltage step needs to be smaller
ALIVE_DAC_IN = 912
#DAC amplitude to pulse across internal ASIC test capacitor through the monitor pin.  This capacitor is ~170 fF, so the voltage step needs to be larger
ALIVE_DAC_MON = 5008
#Timing of this external pulse
ALIVE_TP_PERIOD = 800
ALIVE_TP_SHIFT = 0
#Number of times to shut the power off, wait a number of seconds, and power back on in order to make sure it starts up in the cold
ALIVE_POWER_CYCLES_1 = 3
ALIVE_TIME_OFF_1 = 60
ALIVE_POWER_CYCLES_2 = 5
ALIVE_TIME_OFF_2 = 2
#When analyzing for peaks, minimum value
ALIVE_PEAK_MIN = 430
#Because of issues we were seeing, this makes sure that the peak is within this amount of the maximum measured value of the whole packet
ALIVE_UNDER_MAX = 200
#Checks for a certain amount of peaks
ALIVE_PEAKS_MIN = 4
ALIVE_PEAKS_MAX = 5
#When plotting closeups on pulses, this decides how many samples before and after the measured peak to plot
ALIVE_PLOT_X_BACK = 100
ALIVE_PLOT_X_FORWARD = 100
#ASIC Settings for the Alive test
ALIVE_BASELINE = 200mV
ALIVE_GAIN = 14mV
ALIVE_PEAK = 2us
ALIVE_LEAK = 500pA
ALIVE_ACDC = dc

[DAC_SETTINGS]
#Packets to collect for each channel
DAC_PACKETS = 5
#DAC has 64 possible outputs to measure, choose min and max
DAC_MEAS_MIN = 0
DAC_MEAS_MAX = 0x3F
#When analyzing, the ASIC's ideal voltage step for each DAC setting
DAC_IDEAL_STEP = 18.75
#When fitting the line, we usually don't like to start too low, because it's so non-linear
DAC_MIN_STEP = 0x02
DAC_MAX_STEP = 0x3F


[MONITOR_SETTINGS]
#Packets to collect for each channel
MONITOR_PACKETS = 5
#Monitor test uses internal ASIC pulse, set timing and amplitude settings
MONITOR_FREQ = 800
MONITOR_DLY = 0
MONITOR_AMPL = 15
#When analyzing the monitorpeaks, what the minimum and maximum window should be for a peak, and how many peaks you should detect
MONITOR_PEAK_MIN = 400
MONITOR_PEAK_MAX = 1200
MONITOR_PEAK_NUM_MIN = 5
MONITOR_PEAK_NUM_MAX = 5
#When plotting closeups on pulses, this decides how many samples before and after the measured peak to plot
MONITOR_PLOT_X_BACK = 100
MONITOR_PLOT_X_FORWARD = 100      

[PULSE_SETTINGS]
#Packets to collect for each channel
PULSE_PACKETS = 25
#Monitor test uses internal ASIC pulse, set timing
PULSE_FREQ = 4000
PULSE_DLY = 0x0
#Will search using fine frequency delay in order to sample the height of the peak, gives bounds on how long to search.  Amplitude is what test amplitude to use when searching
PULSE_DELAY_AMPLITUDE = 15
PULSE_DELAY_MIN = 0
PULSE_DELAY_MAX = 25
#Will test pulse heights of internal DAC amplitudes between this mean and max
PULSE_DAC_MIN = 0
PULSE_DAC_MAX = 0x3F
#When analyzing gain, gives the min and max before it's considered a failure
PULSE_47_MIN = 3
PULSE_47_MAX = 5
PULSE_78_MIN = 6
PULSE_78_MAX = 8
PULSE_14_MIN = 12
PULSE_14_MAX = 15
PULSE_25_MIN = 20
PULSE_25_MAX = 26  

[BASELINE_SETTINGS]
#Packets to collect for each channel
BASELINE_PACKETS = 5
#Settings for basic analysis
BASELINE_GAIN = 14mV
BASELINE_PEAK = 2us
BASELINE_LEAK = 500pA
BASELINE_BUFFER = on
#For each baseline setting, there is a band to determine if it fails or is good
BASELINE_200_GOOD_MAX = 600
BASELINE_200_GOOD_MIN = 100
BASELINE_900_GOOD_MAX = 1100
BASELINE_900_GOOD_MIN = 700
#Same type of settings for baseline noise       
NOISE_REJECT_MAX = 800
NOISE_ACCEPTABLE_MAX = 600
NOISE_GOOD_MAX = 400
NOISE_GOOD_MIN = 300
NOISE_ACCEPTABLE_MIN = 200
NOISE_REJECT_MIN = 150

[COLORS]
#Acceptable range shading values for the plots
RED = #FF0000
BLUE = #0000FF
WHITE = #FFFFFF
GREEN = #006400
YELLOW = #FFFF00
#For transparency
ALPHA = 0.1

[FILENAMES]
DEFAULT_GUI_FILE_NAME = defaults.json
BASELINE_NAMING = Baseline_ch{}_{}_{}_{}_{}_{}.dat
MONITOR_NAMING = Monitor_ch_{}.dat
ALIVE_NAMING = Alive_ch{}_{}_{}.dat
ALIVE_NAMING2 = Alive_cycle_{}_{}_{}.dat
DATA_NAME = Data
RESULTS = results.json
SYNC_LINK = Good_Sync.png
SYNC_LINK_MONITOR = Good_Sync_Monitor.png
BASELINE_LINK = {}_Baseline_Summary_Plot.png
MONITOR_LINK = Sample_Pulses.png
ALIVE_LINK = Sample_Pulses.png